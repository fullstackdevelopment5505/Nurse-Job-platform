{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\Paste Work\\\\nurse\\\\nurse\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"D:\\\\Paste Work\\\\nurse\\\\nurse\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(saga);\n\nimport { persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport { put, takeLatest } from \"redux-saga/effects\";\nimport * as routerHelpers from \"../../router/RouterHelpers\";\nexport var actionTypes = {\n  AllJobs: \"[AllJobs] Action\",\n  AddJob: \"[AddJob] Action\",\n  UpdateJob: \"[UpdateJob] Action\",\n  DeleteJob: \"[DeleteJob] Action\",\n  SetCurJob: '[SetCurJob] Action'\n};\nvar initialJobState = {\n  jobs: [],\n  curjob: {}\n}; // export const reducer = persistReducer(\n//   { storage, key: \"personal-user\", whitelist: [\"jobs\"] },\n//   (state = initialJobState, action) => {\n\nexport var jobReducer = function jobReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialJobState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.AllJobs:\n      {\n        var allJobs = action.payload.allJobs;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          jobs: allJobs\n        });\n      }\n\n    case actionTypes.AddJob:\n      {\n        var _allJobs = action.payload.allJobs;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          jobs: _allJobs\n        });\n      }\n\n    case actionTypes.UpdateJob:\n      {\n        var _allJobs2 = action.payload.allJobs;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          jobs: _allJobs2\n        });\n      }\n\n    case actionTypes.DeleteJob:\n      {\n        var _allJobs3 = action.payload.allJobs;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          jobs: _allJobs3\n        });\n      }\n\n    case actionTypes.SetCurJob:\n      {\n        var curjob = action.payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          curjob: curjob\n        });\n      }\n\n    default:\n      return state;\n  }\n}; // );\n\nexport var actions = {\n  allJobs: function allJobs(_allJobs4) {\n    return {\n      type: actionTypes.AllJobs,\n      payload: {\n        allJobs: _allJobs4\n      }\n    };\n  },\n  addJob: function addJob(allJobs) {\n    return {\n      type: actionTypes.AddJob,\n      payload: {\n        allJobs: allJobs\n      }\n    };\n  },\n  updateJob: function updateJob(allJobs) {\n    return {\n      type: actionTypes.UpdateJob,\n      payload: {\n        allJobs: allJobs\n      }\n    };\n  },\n  deleteJob: function deleteJob(allJobs) {\n    return {\n      type: actionTypes.DeleteJob,\n      payload: {\n        allJobs: allJobs\n      }\n    };\n  },\n  setCurJob: function setCurJob(curjob) {\n    return {\n      type: actionTypes.SetCurJob,\n      payload: curjob\n    };\n  }\n};\nexport function saga() {\n  return _regeneratorRuntime.wrap(function saga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"sources":["D:/Paste Work/nurse/nurse/client/src/app/store/ducks/job.duck.js"],"names":["saga","persistReducer","storage","put","takeLatest","routerHelpers","actionTypes","AllJobs","AddJob","UpdateJob","DeleteJob","SetCurJob","initialJobState","jobs","curjob","jobReducer","state","action","type","allJobs","payload","actions","addJob","updateJob","deleteJob","setCurJob"],"mappings":"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","sourcesContent":["import { persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { put, takeLatest } from \"redux-saga/effects\";\r\nimport * as routerHelpers from \"../../router/RouterHelpers\";\r\n\r\nexport const actionTypes = {\r\n  AllJobs : \"[AllJobs] Action\",\r\n  AddJob : \"[AddJob] Action\",\r\n  UpdateJob : \"[UpdateJob] Action\",\r\n  DeleteJob : \"[DeleteJob] Action\",\r\n  SetCurJob:'[SetCurJob] Action',\r\n};\r\n\r\nconst initialJobState = {\r\n  jobs: [],\r\n  curjob:{}\r\n};\r\n\r\n// export const reducer = persistReducer(\r\n//   { storage, key: \"personal-user\", whitelist: [\"jobs\"] },\r\n//   (state = initialJobState, action) => {\r\nexport const jobReducer = (state = initialJobState, action) => {\r\n    switch (action.type) {\r\n      case actionTypes.AllJobs: {\r\n        const { allJobs } = action.payload;\r\n        return { ...state, jobs: allJobs };\r\n      }\r\n      case actionTypes.AddJob: {\r\n        const { allJobs } = action.payload;\r\n        return { ...state, jobs: allJobs };\r\n      }\r\n      case actionTypes.UpdateJob: {\r\n        const { allJobs } = action.payload;\r\n        return { ...state, jobs: allJobs };\r\n      }\r\n      case actionTypes.DeleteJob: {\r\n        const { allJobs } = action.payload;\r\n        return { ...state, jobs: allJobs };\r\n      }\r\n      case actionTypes.SetCurJob: {\r\n        const curjob = action.payload;\r\n        return { ...state, curjob: curjob };\r\n      }\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n// );\r\n\r\nexport const actions = {\r\n  allJobs: allJobs => ({ type: actionTypes.AllJobs, payload: { allJobs } }),\r\n  addJob: allJobs => ({ type: actionTypes.AddJob, payload: { allJobs } }),\r\n  updateJob: allJobs => ({ type: actionTypes.UpdateJob, payload: { allJobs } }),\r\n  deleteJob: allJobs => ({ type: actionTypes.DeleteJob, payload: { allJobs } }),\r\n  setCurJob: curjob=>({type:actionTypes.SetCurJob, payload:curjob}),\r\n};\r\n\r\nexport function* saga() {\r\n  // yield takeLatest(actionTypes.AllJobs, function* allJobsSaga() {\r\n  //   yield put(actions.allJobs());\r\n  // });\r\n\r\n  // yield takeLatest(actionTypes.AddJob, function* addJobSaga() {\r\n  //   yield put(actions.addJob());\r\n  // });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}