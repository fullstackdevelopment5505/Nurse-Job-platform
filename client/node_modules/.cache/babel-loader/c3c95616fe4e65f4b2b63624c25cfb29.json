{"ast":null,"code":"var _jsxFileName = \"D:\\\\Paste Work\\\\nurse\\\\nurse\\\\client\\\\src\\\\_metronic\\\\layout\\\\LayoutInitializer.js\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { LayoutSplashScreen } from \"./LayoutContext\";\nimport * as builder from \"../ducks/builder\";\n/**\r\n * Used to synchronize current layout `menuConfig`, `layoutConfig` and\r\n * `htmlClassService` with redux store.\r\n */\n\nexport default function LayoutInitializer(_ref) {\n  var children = _ref.children,\n      menuConfig = _ref.menuConfig,\n      layoutConfig = _ref.layoutConfig,\n      htmlClassService = _ref.htmlClassService;\n  var dispatch = useDispatch();\n  var builderState = useSelector(function (_ref2) {\n    var builder = _ref2.builder;\n    return builder;\n  });\n  useEffect(function () {\n    dispatch(builder.actions.setMenuConfig(menuConfig));\n  }, [dispatch, menuConfig]);\n  useEffect(function () {\n    if (layoutConfig.demo !== builderState.layoutConfig.demo) {\n      dispatch(builder.actions.setLayoutConfigs(layoutConfig));\n    }\n  }, [dispatch, builderState, layoutConfig]);\n  useEffect(function () {\n    dispatch(builder.actions.setHtmlClassService(htmlClassService));\n  }, [dispatch, htmlClassService]);\n  return htmlClassService === builderState.htmlClassServiceObjects ?\n  /*#__PURE__*/\n  // Render content when `htmlClassService` synchronized with redux store.\n  React.createElement(React.Fragment, null, children) :\n  /*#__PURE__*/\n  // Otherwise sow loading splash screen.\n  React.createElement(LayoutSplashScreen, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["D:/Paste Work/nurse/nurse/client/src/_metronic/layout/LayoutInitializer.js"],"names":["React","useEffect","useDispatch","useSelector","LayoutSplashScreen","builder","LayoutInitializer","children","menuConfig","layoutConfig","htmlClassService","dispatch","builderState","actions","setMenuConfig","demo","setLayoutConfigs","setHtmlClassService","htmlClassServiceObjects"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AAEA;;;;;AAIA,eAAe,SAASC,iBAAT,OAKZ;AAAA,MAJDC,QAIC,QAJDA,QAIC;AAAA,MAHDC,UAGC,QAHDA,UAGC;AAAA,MAFDC,YAEC,QAFDA,YAEC;AAAA,MADDC,gBACC,QADDA,gBACC;AACD,MAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,MAAMU,YAAY,GAAGT,WAAW,CAAC;AAAA,QAAGE,OAAH,SAAGA,OAAH;AAAA,WAAiBA,OAAjB;AAAA,GAAD,CAAhC;AAEAJ,EAAAA,SAAS,CAAC,YAAM;AACdU,IAAAA,QAAQ,CAACN,OAAO,CAACQ,OAAR,CAAgBC,aAAhB,CAA8BN,UAA9B,CAAD,CAAR;AACD,GAFQ,EAEN,CAACG,QAAD,EAAWH,UAAX,CAFM,CAAT;AAIAP,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIQ,YAAY,CAACM,IAAb,KAAsBH,YAAY,CAACH,YAAb,CAA0BM,IAApD,EAA0D;AACxDJ,MAAAA,QAAQ,CAACN,OAAO,CAACQ,OAAR,CAAgBG,gBAAhB,CAAiCP,YAAjC,CAAD,CAAR;AACD;AACF,GAJQ,EAIN,CAACE,QAAD,EAAWC,YAAX,EAAyBH,YAAzB,CAJM,CAAT;AAMAR,EAAAA,SAAS,CAAC,YAAM;AACdU,IAAAA,QAAQ,CAACN,OAAO,CAACQ,OAAR,CAAgBI,mBAAhB,CAAoCP,gBAApC,CAAD,CAAR;AACD,GAFQ,EAEN,CAACC,QAAD,EAAWD,gBAAX,CAFM,CAAT;AAIA,SAAOA,gBAAgB,KAAKE,YAAY,CAACM,uBAAlC;AAAA;AACL;AACA,4CAAGX,QAAH,CAFK;AAAA;AAIL;AACA,sBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF;AAOD","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { LayoutSplashScreen } from \"./LayoutContext\";\r\nimport * as builder from \"../ducks/builder\";\r\n\r\n/**\r\n * Used to synchronize current layout `menuConfig`, `layoutConfig` and\r\n * `htmlClassService` with redux store.\r\n */\r\nexport default function LayoutInitializer({\r\n  children,\r\n  menuConfig,\r\n  layoutConfig,\r\n  htmlClassService\r\n}) {\r\n  const dispatch = useDispatch();\r\n  const builderState = useSelector(({ builder }) => builder);\r\n\r\n  useEffect(() => {\r\n    dispatch(builder.actions.setMenuConfig(menuConfig));\r\n  }, [dispatch, menuConfig]);\r\n\r\n  useEffect(() => {\r\n    if (layoutConfig.demo !== builderState.layoutConfig.demo) {\r\n      dispatch(builder.actions.setLayoutConfigs(layoutConfig));\r\n    }\r\n  }, [dispatch, builderState, layoutConfig]);\r\n\r\n  useEffect(() => {\r\n    dispatch(builder.actions.setHtmlClassService(htmlClassService));\r\n  }, [dispatch, htmlClassService]);\r\n\r\n  return htmlClassService === builderState.htmlClassServiceObjects ? (\r\n    // Render content when `htmlClassService` synchronized with redux store.\r\n    <>{children}</>\r\n  ) : (\r\n    // Otherwise sow loading splash screen.\r\n    <LayoutSplashScreen />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}