{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\Paste Work\\\\nurse\\\\nurse\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"D:\\\\Paste Work\\\\nurse\\\\nurse\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(saga);\n\nimport { persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport { put, takeLatest } from \"redux-saga/effects\";\nimport * as routerHelpers from \"../../router/RouterHelpers\";\nexport var actionTypes = {\n  AllUsers: \"[AllUsers] Action\",\n  AddUser: \"[AddUser] Action\",\n  UpdateUser: \"[UpdateUser] Action\",\n  DeleteUser: \"[DeleteUser] Action\",\n  Logout: \"[Logout] Action\",\n  AddNurse: '[AddNurse] Action',\n  UpdateNurse: '[UpdateNurse] Action',\n  DeleteNurse: '[DeleteNurse] Action',\n  AllNurses: '[AllNurses] Action',\n  UpdateClient: '[UpdateClient] Action',\n  DeleteClient: '[DeleteClient] Action',\n  AllClients: '[AllClients] Action',\n  SetCurUser: '[SetCurUser] Action'\n};\nvar initialUserState = {\n  users: [],\n  nurses: [],\n  clients: [],\n  curuser: {}\n}; // export const reducer = persistReducer(\n//   { storage, key: \"personal-user\", whitelist: [\"users\"] },\n//   (state = initialUserState, action) => {\n\nexport var userReducer = function userReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialUserState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.AllUsers:\n      {\n        var allUsers = action.payload.allUsers;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          users: allUsers\n        });\n      }\n\n    case actionTypes.AddUser:\n      {\n        var _allUsers = action.payload.allUsers;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          users: _allUsers\n        });\n      }\n\n    case actionTypes.UpdateUser:\n      {\n        var _allUsers2 = action.payload.allUsers;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          users: _allUsers2\n        });\n      }\n\n    case actionTypes.DeleteUser:\n      {\n        var _allUsers3 = action.payload.allUsers;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          users: _allUsers3\n        });\n      }\n\n    case actionTypes.SetCurUser:\n      {\n        var curuser = action.payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          curuser: curuser\n        });\n      }\n\n    case actionTypes.Logout:\n      {\n        routerHelpers.forgotLastLocation();\n        return initialUserState;\n      }\n\n    case actionTypes.AddNurse:\n      {\n        var nurses = action.payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          nurses: nurses\n        });\n      }\n\n    case actionTypes.DeleteNurse:\n      {\n        var _nurses = action.payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          nurses: _nurses\n        });\n      }\n\n    case actionTypes.UpdateNurse:\n      {\n        var _nurses2 = action.payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          nurses: _nurses2\n        });\n      }\n\n    case actionTypes.AllNurses:\n      {\n        var _nurses3 = action.payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          nurses: _nurses3\n        });\n      }\n\n    case actionTypes.AddClient:\n      {\n        var clients = action.payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          clients: clients\n        });\n      }\n\n    case actionTypes.DeleteClient:\n      {\n        var _clients = action.payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          clients: _clients\n        });\n      }\n\n    case actionTypes.UpdateClient:\n      {\n        var _clients2 = action.payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          clients: _clients2\n        });\n      }\n\n    case actionTypes.AllClients:\n      {\n        var _clients3 = action.payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          clients: _clients3\n        });\n      }\n\n    default:\n      return state;\n  }\n}; // );\n\nexport var actions = {\n  allUsers: function allUsers(_allUsers4) {\n    return {\n      type: actionTypes.AllUsers,\n      payload: {\n        allUsers: _allUsers4\n      }\n    };\n  },\n  addUser: function addUser(allUsers) {\n    return {\n      type: actionTypes.AddUser,\n      payload: {\n        allUsers: allUsers\n      }\n    };\n  },\n  updateUser: function updateUser(allUsers) {\n    return {\n      type: actionTypes.UpdateUser,\n      payload: {\n        allUsers: allUsers\n      }\n    };\n  },\n  deleteUser: function deleteUser(allUsers) {\n    return {\n      type: actionTypes.DeleteUser,\n      payload: {\n        allUsers: allUsers\n      }\n    };\n  },\n  setCurUser: function setCurUser(curuser) {\n    return {\n      type: actionTypes.SetCurUser,\n      payload: curuser\n    };\n  },\n  addNurse: function addNurse(nurses) {\n    return {\n      type: actionTypes.AddNurse,\n      payload: nurses\n    };\n  },\n  updateNurse: function updateNurse(nurses) {\n    return {\n      type: actionTypes.UpdateNurse,\n      payload: nurses\n    };\n  },\n  deleteNurse: function deleteNurse(nurses) {\n    return {\n      type: actionTypes.DeleteNurse,\n      payload: nurses\n    };\n  },\n  allNurses: function allNurses(nurses) {\n    return {\n      type: actionTypes.AllNurses,\n      payload: nurses\n    };\n  },\n  addClient: function addClient(clients) {\n    return {\n      type: actionTypes.AddClient,\n      payload: clients\n    };\n  },\n  updateClient: function updateClient(clients) {\n    return {\n      type: actionTypes.UpdateClient,\n      payload: clients\n    };\n  },\n  deleteClient: function deleteClient(clients) {\n    return {\n      type: actionTypes.DeleteClient,\n      payload: clients\n    };\n  },\n  allClients: function allClients(clients) {\n    return {\n      type: actionTypes.AllClients,\n      payload: clients\n    };\n  },\n  logout: function logout() {\n    return {\n      type: actionTypes.Logout\n    };\n  }\n};\nexport function saga() {\n  return _regeneratorRuntime.wrap(function saga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"sources":["D:/Paste Work/nurse/nurse/client/src/app/store/ducks/user.duck.js"],"names":["saga","persistReducer","storage","put","takeLatest","routerHelpers","actionTypes","AllUsers","AddUser","UpdateUser","DeleteUser","Logout","AddNurse","UpdateNurse","DeleteNurse","AllNurses","UpdateClient","DeleteClient","AllClients","SetCurUser","initialUserState","users","nurses","clients","curuser","userReducer","state","action","type","allUsers","payload","forgotLastLocation","AddClient","actions","addUser","updateUser","deleteUser","setCurUser","addNurse","updateNurse","deleteNurse","allNurses","addClient","updateClient","deleteClient","allClients","logout"],"mappings":"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","sourcesContent":["import { persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { put, takeLatest } from \"redux-saga/effects\";\r\nimport * as routerHelpers from \"../../router/RouterHelpers\";\r\n\r\nexport const actionTypes = {\r\n  AllUsers : \"[AllUsers] Action\",\r\n  AddUser : \"[AddUser] Action\",\r\n  UpdateUser : \"[UpdateUser] Action\",\r\n  DeleteUser : \"[DeleteUser] Action\",\r\n  Logout : \"[Logout] Action\",\r\n  AddNurse :'[AddNurse] Action',\r\n  UpdateNurse :'[UpdateNurse] Action',\r\n  DeleteNurse :'[DeleteNurse] Action',\r\n  AllNurses :'[AllNurses] Action',\r\n  UpdateClient :'[UpdateClient] Action',\r\n  DeleteClient :'[DeleteClient] Action',\r\n  AllClients :'[AllClients] Action',\r\n  SetCurUser:'[SetCurUser] Action',\r\n};\r\n\r\nconst initialUserState = {\r\n  users: [],\r\n  nurses:[],\r\n  clients:[],\r\n  curuser:{}\r\n};\r\n\r\n// export const reducer = persistReducer(\r\n//   { storage, key: \"personal-user\", whitelist: [\"users\"] },\r\n//   (state = initialUserState, action) => {\r\nexport const userReducer = (state = initialUserState, action) => {\r\n    switch (action.type) {\r\n      case actionTypes.AllUsers: {\r\n        const { allUsers } = action.payload;\r\n        return { ...state, users: allUsers };\r\n      }\r\n      case actionTypes.AddUser: {\r\n        const { allUsers } = action.payload;\r\n        return { ...state, users: allUsers };\r\n      }\r\n      case actionTypes.UpdateUser: {\r\n        const { allUsers } = action.payload;\r\n        return { ...state, users: allUsers };\r\n      }\r\n      case actionTypes.DeleteUser: {\r\n        const { allUsers } = action.payload;\r\n        return { ...state, users: allUsers };\r\n      }\r\n      case actionTypes.SetCurUser: {\r\n        const curuser = action.payload;\r\n        return { ...state, curuser: curuser };\r\n      }\r\n      case actionTypes.Logout: {\r\n        routerHelpers.forgotLastLocation();\r\n        return initialUserState;\r\n      }\r\n\r\n\r\n      case actionTypes.AddNurse: {\r\n        const nurses = action.payload;\r\n        return { ...state, nurses: nurses };\r\n      }\r\n      case actionTypes.DeleteNurse: {\r\n        const nurses = action.payload;\r\n        return { ...state, nurses: nurses };\r\n      }\r\n      case actionTypes.UpdateNurse: {\r\n        const nurses = action.payload;\r\n        return { ...state, nurses: nurses };\r\n      }\r\n      case actionTypes.AllNurses: {\r\n        const nurses = action.payload;\r\n        return { ...state, nurses: nurses };\r\n      }\r\n\r\n\r\n      case actionTypes.AddClient: {\r\n        const clients = action.payload;\r\n        return { ...state, clients: clients };\r\n      }\r\n      case actionTypes.DeleteClient: {\r\n        const clients = action.payload;\r\n        return { ...state, clients: clients };\r\n      }\r\n      case actionTypes.UpdateClient: {\r\n        const clients = action.payload;\r\n        return { ...state, clients: clients };\r\n      }\r\n      case actionTypes.AllClients: {\r\n        const clients = action.payload;\r\n        return { ...state, clients: clients };\r\n      }\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n// );\r\n\r\nexport const actions = {\r\n  allUsers: allUsers => ({ type: actionTypes.AllUsers, payload: { allUsers } }),\r\n  addUser: allUsers => ({ type: actionTypes.AddUser, payload: { allUsers } }),\r\n  updateUser: allUsers => ({ type: actionTypes.UpdateUser, payload: { allUsers } }),\r\n  deleteUser: allUsers => ({ type: actionTypes.DeleteUser, payload: { allUsers } }),\r\n  setCurUser: curuser=>({type:actionTypes.SetCurUser, payload:curuser}),\r\n  addNurse:  nurses=> ({ type: actionTypes.AddNurse, payload: nurses }),\r\n  updateNurse: nurses => ({ type: actionTypes.UpdateNurse, payload: nurses }),\r\n  deleteNurse: nurses => ({ type: actionTypes.DeleteNurse, payload: nurses }),\r\n  allNurses: nurses => ({ type: actionTypes.AllNurses, payload: nurses }),\r\n\r\n  addClient: clients => ({ type: actionTypes.AddClient, payload: clients }),\r\n  updateClient: clients => ({ type: actionTypes.UpdateClient, payload: clients }),\r\n  deleteClient: clients => ({ type: actionTypes.DeleteClient, payload: clients }),\r\n  allClients: clients => ({ type: actionTypes.AllClients, payload: clients }),\r\n\r\n\r\n  logout: () => ({ type: actionTypes.Logout }),\r\n\r\n};\r\n\r\nexport function* saga() {\r\n  // yield takeLatest(actionTypes.AllUsers, function* allUsersSaga() {\r\n  //   yield put(actions.allUsers());\r\n  // });\r\n\r\n  // yield takeLatest(actionTypes.AddUser, function* addUserSaga() {\r\n  //   yield put(actions.addUser());\r\n  // });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}