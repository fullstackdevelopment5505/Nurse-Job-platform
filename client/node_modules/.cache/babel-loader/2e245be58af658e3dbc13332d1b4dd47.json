{"ast":null,"code":"import _slicedToArray from \"D:\\\\Paste Work\\\\nurse\\\\nurse\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"D:\\\\Paste Work\\\\nurse\\\\nurse\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _toPropertyKey from \"D:\\\\Paste Work\\\\nurse\\\\nurse\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toPropertyKey\";\nimport _defineProperty from \"D:\\\\Paste Work\\\\nurse\\\\nurse\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"D:\\\\Paste Work\\\\nurse\\\\nurse\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _createForOfIteratorHelper from \"D:\\\\Paste Work\\\\nurse\\\\nurse\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nvar _jsxFileName = \"D:\\\\Paste Work\\\\nurse\\\\nurse\\\\client\\\\src\\\\_metronic\\\\layout\\\\LayoutContext.js\";\nimport React, { createContext, useContext, useEffect, useMemo, useReducer } from \"react\";\n/**\r\n * Both context used to create inside react `redux`-like global state managed\r\n * entirely by react.\r\n *\r\n * @see https://kentcdodds.com/blog/how-to-use-react-context-effectively\r\n */\n\nvar LayoutContext = {\n  /**\r\n   * Stores layout state, can be consumed globally.\r\n   */\n  State: createContext(null),\n\n  /**\r\n   * Stores `dispatch` function to update layout state, intended to be internal.\r\n   */\n  Dispatch: createContext(null)\n};\n/**\r\n * Layout action types, used to filter out dispatched actions.\r\n */\n\nvar actionTypes = {\n  /**\r\n   * Initializes layout state from provided `{ pathname, menuConfig }` action\r\n   * payload.\r\n   */\n  INIT: \"INIT\",\n\n  /**\r\n   * Updates current subheader from provided `{ title }` action payload.\r\n   */\n  SET_SUBHEADER: \"SET_SUBHEADER\",\n\n  /**\r\n   * Controls splash screen visibility.\r\n   */\n  SHOW_SPLASH_SCREEN: \"SHOW_SPLASH_SCREEN\",\n  HIDE_SPLASH_SCREEN: \"HIDE_SPLASH_SCREEN\"\n};\n/**\r\n * Recursively runs over `items` to find `pageConfig` of `currentPage`.\r\n *\r\n * Returns `undefined` if there are no matches.\r\n */\n\nfunction findPageConfig(currentPage, items, breadcrumbs) {\n  // Ignore non array `items`.\n  if (!items || !Array.isArray(items)) {\n    return;\n  }\n\n  var _iterator = _createForOfIteratorHelper(items),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var item = _step.value;\n\n      // Return `item` if it's `page` matches `currentPage`\n      if (currentPage === item.page && !item.submenu) {\n        return item;\n      } // Try to `pageConfig` in `item.submenu` if it is defined.\n\n\n      if (item.submenu) {\n        var pageConfig = findPageConfig(currentPage, item.submenu, breadcrumbs);\n\n        if (pageConfig) {\n          breadcrumbs.push(item);\n          return pageConfig;\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n/**\r\n * Used to lazily create initial layout state.\r\n */\n\n\nfunction init(_ref) {\n  var pathname = _ref.pathname,\n      menuConfig = _ref.menuConfig;\n  var currentPage = pathname.slice(1\n  /* Remove leading slash. */\n  );\n  var breadcrumbs = [];\n  var pageConfig = findPageConfig(currentPage, menuConfig.aside.items, breadcrumbs) || findPageConfig(currentPage, menuConfig.header.items, breadcrumbs);\n  breadcrumbs.reverse();\n  var state = {\n    subheader: {\n      title: \"\",\n      breadcrumb: [],\n      description: \"\"\n    },\n    splashScreen: {\n      refs: {}\n    }\n  };\n\n  if (pageConfig) {\n    breadcrumbs.push(pageConfig);\n    state.subheader.title = pageConfig.title;\n    state.subheader.breadcrumb = breadcrumbs;\n  }\n\n  return state;\n}\n\nfunction reducer(state, _ref2) {\n  var type = _ref2.type,\n      payload = _ref2.payload;\n\n  if (type === actionTypes.INIT) {\n    var nextState = init(payload); // Update only subheader.\n\n    return _objectSpread(_objectSpread({}, state), {}, {\n      subheader: nextState.subheader\n    });\n  }\n\n  if (type === actionTypes.SET_SUBHEADER) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      subheader: payload\n    });\n  }\n\n  if (type === actionTypes.SHOW_SPLASH_SCREEN) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      splashScreen: _objectSpread(_objectSpread({}, state.splashScreen), {}, {\n        refs: _objectSpread(_objectSpread({}, state.splashScreen.refs), {}, _defineProperty({}, payload.id, true))\n      })\n    });\n  }\n\n  if (type === actionTypes.HIDE_SPLASH_SCREEN) {\n    var _state$splashScreen$r = state.splashScreen.refs,\n        _payload$id = payload.id,\n        skip = _state$splashScreen$r[_payload$id],\n        nextRefs = _objectWithoutProperties(_state$splashScreen$r, [_payload$id].map(_toPropertyKey));\n\n    return _objectSpread(_objectSpread({}, state), {}, {\n      splashScreen: _objectSpread(_objectSpread({}, state.splashScreen), {}, {\n        refs: nextRefs\n      })\n    });\n  }\n\n  return state;\n}\n/**\r\n * Creates layout reducer and provides it's `state` and ` dispatch`.\r\n */\n\n\nexport function LayoutContextProvider(_ref3) {\n  var history = _ref3.history,\n      children = _ref3.children,\n      menuConfig = _ref3.menuConfig;\n\n  var _useReducer = useReducer(reducer, {\n    menuConfig: menuConfig,\n    pathname: history.location.pathname\n  }, // See https://reactjs.org/docs/hooks-reference.html#lazy-initialization\n  init),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1]; // Subscribe to history changes and reinitialize on each change.\n\n\n  useEffect(function () {\n    return history.listen(function (_ref4) {\n      var pathname = _ref4.pathname;\n      dispatch({\n        type: actionTypes.INIT,\n        payload: {\n          pathname: pathname,\n          menuConfig: menuConfig\n        }\n      });\n    });\n  },\n  /**\r\n   * Passing `history` and `menuConfig` to `deps` ensures that `useEffect`\r\n   * will cleanup current `history` listener and will dispatch `INIT`\r\n   * with `menuConfig` reference from current render.\r\n   *\r\n   * @see https://reactjs.org/docs/hooks-reference.html#conditionally-firing-an-effect\r\n   */\n  [history, menuConfig]);\n  var splashScreenRefs = state.splashScreen.refs;\n  var splashScreenVisible = useMemo(function () {\n    return Object.keys(splashScreenRefs).length > 0;\n  }, [splashScreenRefs]);\n  useEffect(function () {\n    var splashScreen = document.getElementById(\"splash-screen\");\n\n    if (splashScreenVisible) {\n      splashScreen.classList.remove(\"hidden\");\n      return function () {\n        splashScreen.classList.add(\"hidden\");\n      };\n    }\n\n    var timeout = setTimeout(function () {\n      splashScreen.classList.add(\"hidden\");\n    }, 1000);\n    return function () {\n      clearTimeout(timeout);\n    };\n  }, [splashScreenVisible]); // Pass state and dispatch to it's contexts.\n\n  return /*#__PURE__*/React.createElement(LayoutContext.State.Provider, {\n    value: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LayoutContext.Dispatch.Provider, {\n    value: dispatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }\n  }, children));\n}\n/**\r\n * Used to access latest layout context state.\r\n *\r\n * @example\r\n *\r\n * export function Subheader() {\r\n *   return (\r\n *     <LayoutContextConsumer>\r\n *       {({ subheader: { title } }) => <h1>{title}</h1>}\r\n *     </LayoutContextConsumer>\r\n *   );\r\n * }\r\n */\n\nexport var LayoutContextConsumer = LayoutContext.State.Consumer;\n/**\r\n * Hook to access latest layout context state.\r\n *\r\n * @example\r\n *\r\n * export function Subheader() {\r\n *   const { subheader: { title } } = useLayoutContext();\r\n *\r\n *   return <h1>{title}</h1>;\r\n * }\r\n */\n\nexport function useLayoutContext() {\n  var context = useContext(LayoutContext.State);\n\n  if (!context) {\n    throw new Error(\"\");\n  }\n\n  return context;\n}\n/**\r\n * Used to override layout subheader state.\r\n */\n\nexport function LayoutSubheader(_ref5) {\n  var title = _ref5.title,\n      breadcrumb = _ref5.breadcrumb,\n      description = _ref5.description;\n  var dispatch = useContext(LayoutContext.Dispatch);\n  useEffect(function () {\n    dispatch({\n      type: actionTypes.SET_SUBHEADER,\n      payload: {\n        title: title,\n        breadcrumb: breadcrumb,\n        description: description\n      }\n    });\n  }, [dispatch, title, breadcrumb, description]);\n  return null;\n}\nexport function LayoutSplashScreen(_ref6) {\n  var _ref6$visible = _ref6.visible,\n      visible = _ref6$visible === void 0 ? false : _ref6$visible;\n  var dispatch = useContext(LayoutContext.Dispatch);\n  useEffect(function () {\n    if (!visible) {\n      return;\n    }\n\n    var id = Math.random();\n    dispatch({\n      type: actionTypes.SHOW_SPLASH_SCREEN,\n      payload: {\n        id: id\n      }\n    });\n    return function () {\n      dispatch({\n        type: actionTypes.HIDE_SPLASH_SCREEN,\n        payload: {\n          id: id\n        }\n      });\n    };\n  }, [visible, dispatch]);\n  return null;\n}","map":{"version":3,"sources":["D:/Paste Work/nurse/nurse/client/src/_metronic/layout/LayoutContext.js"],"names":["React","createContext","useContext","useEffect","useMemo","useReducer","LayoutContext","State","Dispatch","actionTypes","INIT","SET_SUBHEADER","SHOW_SPLASH_SCREEN","HIDE_SPLASH_SCREEN","findPageConfig","currentPage","items","breadcrumbs","Array","isArray","item","page","submenu","pageConfig","push","init","pathname","menuConfig","slice","aside","header","reverse","state","subheader","title","breadcrumb","description","splashScreen","refs","reducer","type","payload","nextState","id","skip","nextRefs","LayoutContextProvider","history","children","location","dispatch","listen","splashScreenRefs","splashScreenVisible","Object","keys","length","document","getElementById","classList","remove","add","timeout","setTimeout","clearTimeout","LayoutContextConsumer","Consumer","useLayoutContext","context","Error","LayoutSubheader","LayoutSplashScreen","visible","Math","random"],"mappings":"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","sourcesContent":["import React, {\r\n  createContext,\r\n  useContext,\r\n  useEffect,\r\n  useMemo,\r\n  useReducer\r\n} from \"react\";\r\n\r\n/**\r\n * Both context used to create inside react `redux`-like global state managed\r\n * entirely by react.\r\n *\r\n * @see https://kentcdodds.com/blog/how-to-use-react-context-effectively\r\n */\r\n\r\nconst LayoutContext = {\r\n  /**\r\n   * Stores layout state, can be consumed globally.\r\n   */\r\n  State: createContext(null),\r\n\r\n  /**\r\n   * Stores `dispatch` function to update layout state, intended to be internal.\r\n   */\r\n  Dispatch: createContext(null)\r\n};\r\n\r\n/**\r\n * Layout action types, used to filter out dispatched actions.\r\n */\r\nconst actionTypes = {\r\n  /**\r\n   * Initializes layout state from provided `{ pathname, menuConfig }` action\r\n   * payload.\r\n   */\r\n  INIT: \"INIT\",\r\n\r\n  /**\r\n   * Updates current subheader from provided `{ title }` action payload.\r\n   */\r\n  SET_SUBHEADER: \"SET_SUBHEADER\",\r\n\r\n  /**\r\n   * Controls splash screen visibility.\r\n   */\r\n  SHOW_SPLASH_SCREEN: \"SHOW_SPLASH_SCREEN\",\r\n  HIDE_SPLASH_SCREEN: \"HIDE_SPLASH_SCREEN\"\r\n};\r\n\r\n/**\r\n * Recursively runs over `items` to find `pageConfig` of `currentPage`.\r\n *\r\n * Returns `undefined` if there are no matches.\r\n */\r\nfunction findPageConfig(currentPage, items, breadcrumbs) {\r\n  // Ignore non array `items`.\r\n  if (!items || !Array.isArray(items)) {\r\n    return;\r\n  }\r\n\r\n  for (const item of items) {\r\n    // Return `item` if it's `page` matches `currentPage`\r\n    if (currentPage === item.page && !item.submenu) {\r\n      return item;\r\n    }\r\n\r\n    // Try to `pageConfig` in `item.submenu` if it is defined.\r\n    if (item.submenu) {\r\n      const pageConfig = findPageConfig(currentPage, item.submenu, breadcrumbs);\r\n      if (pageConfig) {\r\n        breadcrumbs.push(item);\r\n        return pageConfig;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Used to lazily create initial layout state.\r\n */\r\nfunction init({ pathname, menuConfig }) {\r\n  const currentPage = pathname.slice(1 /* Remove leading slash. */);\r\n  let breadcrumbs = [];\r\n  const pageConfig =\r\n      findPageConfig(currentPage, menuConfig.aside.items, breadcrumbs) ||\r\n      findPageConfig(currentPage, menuConfig.header.items, breadcrumbs);\r\n\r\n  breadcrumbs.reverse();\r\n  const state = { subheader: { title: \"\", breadcrumb: [], description: \"\" }, splashScreen: { refs: {} } };\r\n  if (pageConfig) {\r\n    breadcrumbs.push(pageConfig);\r\n    state.subheader.title = pageConfig.title;\r\n    state.subheader.breadcrumb = breadcrumbs;\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nfunction reducer(state, { type, payload }) {\r\n  if (type === actionTypes.INIT) {\r\n    const nextState = init(payload);\r\n\r\n    // Update only subheader.\r\n    return { ...state, subheader: nextState.subheader };\r\n  }\r\n\r\n  if (type === actionTypes.SET_SUBHEADER) {\r\n    return { ...state, subheader: payload };\r\n  }\r\n\r\n  if (type === actionTypes.SHOW_SPLASH_SCREEN) {\r\n    return {\r\n      ...state,\r\n      splashScreen: {\r\n        ...state.splashScreen,\r\n        refs: { ...state.splashScreen.refs, [payload.id]: true }\r\n      }\r\n    };\r\n  }\r\n\r\n  if (type === actionTypes.HIDE_SPLASH_SCREEN) {\r\n    const { [payload.id]: skip, ...nextRefs } = state.splashScreen.refs;\r\n\r\n    return {\r\n      ...state,\r\n      splashScreen: { ...state.splashScreen, refs: nextRefs }\r\n    };\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\n/**\r\n * Creates layout reducer and provides it's `state` and ` dispatch`.\r\n */\r\nexport function LayoutContextProvider({ history, children, menuConfig }) {\r\n  const [state, dispatch] = useReducer(\r\n      reducer,\r\n      { menuConfig, pathname: history.location.pathname },\r\n      // See https://reactjs.org/docs/hooks-reference.html#lazy-initialization\r\n      init\r\n  );\r\n\r\n  // Subscribe to history changes and reinitialize on each change.\r\n  useEffect(\r\n      () =>\r\n          history.listen(({ pathname }) => {\r\n            dispatch({\r\n              type: actionTypes.INIT,\r\n              payload: { pathname, menuConfig }\r\n            });\r\n          }),\r\n\r\n      /**\r\n       * Passing `history` and `menuConfig` to `deps` ensures that `useEffect`\r\n       * will cleanup current `history` listener and will dispatch `INIT`\r\n       * with `menuConfig` reference from current render.\r\n       *\r\n       * @see https://reactjs.org/docs/hooks-reference.html#conditionally-firing-an-effect\r\n       */\r\n      [history, menuConfig]\r\n  );\r\n\r\n  const { refs: splashScreenRefs } = state.splashScreen;\r\n  const splashScreenVisible = useMemo(\r\n      () => Object.keys(splashScreenRefs).length > 0,\r\n      [splashScreenRefs]\r\n  );\r\n\r\n  useEffect(() => {\r\n    const splashScreen = document.getElementById(\"splash-screen\");\r\n\r\n    if (splashScreenVisible) {\r\n      splashScreen.classList.remove(\"hidden\");\r\n\r\n      return () => {\r\n        splashScreen.classList.add(\"hidden\");\r\n      };\r\n    }\r\n\r\n    const timeout = setTimeout(() => {\r\n      splashScreen.classList.add(\"hidden\");\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearTimeout(timeout);\r\n    };\r\n  }, [splashScreenVisible]);\r\n\r\n  // Pass state and dispatch to it's contexts.\r\n  return (\r\n      <LayoutContext.State.Provider value={state}>\r\n        <LayoutContext.Dispatch.Provider value={dispatch}>\r\n          {children}\r\n        </LayoutContext.Dispatch.Provider>\r\n      </LayoutContext.State.Provider>\r\n  );\r\n}\r\n\r\n/**\r\n * Used to access latest layout context state.\r\n *\r\n * @example\r\n *\r\n * export function Subheader() {\r\n *   return (\r\n *     <LayoutContextConsumer>\r\n *       {({ subheader: { title } }) => <h1>{title}</h1>}\r\n *     </LayoutContextConsumer>\r\n *   );\r\n * }\r\n */\r\nexport const LayoutContextConsumer = LayoutContext.State.Consumer;\r\n\r\n/**\r\n * Hook to access latest layout context state.\r\n *\r\n * @example\r\n *\r\n * export function Subheader() {\r\n *   const { subheader: { title } } = useLayoutContext();\r\n *\r\n *   return <h1>{title}</h1>;\r\n * }\r\n */\r\nexport function useLayoutContext() {\r\n  const context = useContext(LayoutContext.State);\r\n\r\n  if (!context) {\r\n    throw new Error(\"\");\r\n  }\r\n\r\n  return context;\r\n}\r\n\r\n/**\r\n * Used to override layout subheader state.\r\n */\r\nexport function LayoutSubheader({ title, breadcrumb, description }) {\r\n  const dispatch = useContext(LayoutContext.Dispatch);\r\n\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: actionTypes.SET_SUBHEADER,\r\n      payload: { title, breadcrumb, description }\r\n    });\r\n  }, [dispatch, title, breadcrumb, description]);\r\n\r\n  return null;\r\n}\r\n\r\nexport function LayoutSplashScreen({ visible = false }) {\r\n  const dispatch = useContext(LayoutContext.Dispatch);\r\n\r\n  useEffect(() => {\r\n    if (!visible) {\r\n      return;\r\n    }\r\n\r\n    const id = Math.random();\r\n\r\n    dispatch({ type: actionTypes.SHOW_SPLASH_SCREEN, payload: { id } });\r\n\r\n    return () => {\r\n      dispatch({ type: actionTypes.HIDE_SPLASH_SCREEN, payload: { id } });\r\n    };\r\n  }, [visible, dispatch]);\r\n\r\n  return null;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}