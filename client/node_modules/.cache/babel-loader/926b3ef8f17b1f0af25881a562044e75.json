{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\Paste Work\\\\nurse\\\\nurse\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"D:\\\\Paste Work\\\\nurse\\\\nurse\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(saga);\n\nimport { persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport { put, takeLatest } from \"redux-saga/effects\";\nimport * as routerHelpers from \"../../router/RouterHelpers\";\nexport var actionTypes = {\n  AllHistorys: \"[AllHistorys] Action\",\n  AddHistory: \"[AddHistory] Action\",\n  UpdateHistory: \"[UpdateHistory] Action\",\n  DeleteHistory: \"[DeleteHistory] Action\",\n  SetCurHistory: '[SetCurHistory] Action'\n};\nvar initialHistoryState = {\n  historys: [],\n  curhistory: {}\n}; // export const reducer = persistReducer(\n//   { storage, key: \"personal-user\", whitelist: [\"historys\"] },\n//   (state = initialHistoryState, action) => {\n\nexport var historyReducer = function historyReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialHistoryState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.AllHistorys:\n      {\n        var allHistorys = action.payload.allHistorys;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          historys: allHistorys\n        });\n      }\n\n    case actionTypes.AddHistory:\n      {\n        var _allHistorys = action.payload.allHistorys;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          historys: _allHistorys\n        });\n      }\n\n    case actionTypes.UpdateHistory:\n      {\n        var _allHistorys2 = action.payload.allHistorys;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          historys: _allHistorys2\n        });\n      }\n\n    case actionTypes.DeleteHistory:\n      {\n        var _allHistorys3 = action.payload.allHistorys;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          historys: _allHistorys3\n        });\n      }\n\n    case actionTypes.SetCurHistory:\n      {\n        var curhistory = action.payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          curhistory: curhistory\n        });\n      }\n\n    default:\n      return state;\n  }\n}; // );\n\nexport var actions = {\n  allHistorys: function allHistorys(_allHistorys4) {\n    return {\n      type: actionTypes.AllHistorys,\n      payload: {\n        allHistorys: _allHistorys4\n      }\n    };\n  },\n  addHistory: function addHistory(allHistorys) {\n    return {\n      type: actionTypes.AddHistory,\n      payload: {\n        allHistorys: allHistorys\n      }\n    };\n  },\n  updateHistory: function updateHistory(allHistorys) {\n    return {\n      type: actionTypes.UpdateHistory,\n      payload: {\n        allHistorys: allHistorys\n      }\n    };\n  },\n  deleteHistory: function deleteHistory(allHistorys) {\n    return {\n      type: actionTypes.DeleteHistory,\n      payload: {\n        allHistorys: allHistorys\n      }\n    };\n  },\n  setCurHistory: function setCurHistory(curhistory) {\n    return {\n      type: actionTypes.SetCurHistory,\n      payload: curhistory\n    };\n  }\n};\nexport function saga() {\n  return _regeneratorRuntime.wrap(function saga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"sources":["D:/Paste Work/nurse/nurse/client/src/app/store/ducks/history.duck.js"],"names":["saga","persistReducer","storage","put","takeLatest","routerHelpers","actionTypes","AllHistorys","AddHistory","UpdateHistory","DeleteHistory","SetCurHistory","initialHistoryState","historys","curhistory","historyReducer","state","action","type","allHistorys","payload","actions","addHistory","updateHistory","deleteHistory","setCurHistory"],"mappings":"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","sourcesContent":["import { persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { put, takeLatest } from \"redux-saga/effects\";\r\nimport * as routerHelpers from \"../../router/RouterHelpers\";\r\n\r\nexport const actionTypes = {\r\n  AllHistorys : \"[AllHistorys] Action\",\r\n  AddHistory : \"[AddHistory] Action\",\r\n  UpdateHistory : \"[UpdateHistory] Action\",\r\n  DeleteHistory : \"[DeleteHistory] Action\",\r\n  SetCurHistory:'[SetCurHistory] Action',\r\n};\r\n\r\nconst initialHistoryState = {\r\n  historys: [],\r\n  curhistory:{}\r\n};\r\n\r\n// export const reducer = persistReducer(\r\n//   { storage, key: \"personal-user\", whitelist: [\"historys\"] },\r\n//   (state = initialHistoryState, action) => {\r\nexport const historyReducer = (state = initialHistoryState, action) => {\r\n    switch (action.type) {\r\n      case actionTypes.AllHistorys: {\r\n        const { allHistorys } = action.payload;\r\n        return { ...state, historys: allHistorys };\r\n      }\r\n      case actionTypes.AddHistory: {\r\n        const { allHistorys } = action.payload;\r\n        return { ...state, historys: allHistorys };\r\n      }\r\n      case actionTypes.UpdateHistory: {\r\n        const { allHistorys } = action.payload;\r\n        return { ...state, historys: allHistorys };\r\n      }\r\n      case actionTypes.DeleteHistory: {\r\n        const { allHistorys } = action.payload;\r\n        return { ...state, historys: allHistorys };\r\n      }\r\n      case actionTypes.SetCurHistory: {\r\n        const curhistory = action.payload;\r\n        return { ...state, curhistory: curhistory };\r\n      }\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n// );\r\n\r\nexport const actions = {\r\n  allHistorys: allHistorys => ({ type: actionTypes.AllHistorys, payload: { allHistorys } }),\r\n  addHistory: allHistorys => ({ type: actionTypes.AddHistory, payload: { allHistorys } }),\r\n  updateHistory: allHistorys => ({ type: actionTypes.UpdateHistory, payload: { allHistorys } }),\r\n  deleteHistory: allHistorys => ({ type: actionTypes.DeleteHistory, payload: { allHistorys } }),\r\n  setCurHistory: curhistory=>({type:actionTypes.SetCurHistory, payload:curhistory}),\r\n};\r\n\r\nexport function* saga() {\r\n  // yield takeLatest(actionTypes.AllHistorys, function* allHistorysSaga() {\r\n  //   yield put(actions.allHistorys());\r\n  // });\r\n\r\n  // yield takeLatest(actionTypes.AddHistory, function* addHistorySaga() {\r\n  //   yield put(actions.addHistory());\r\n  // });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}