{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\Paste Work\\\\nurse\\\\nurse\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"D:\\\\Paste Work\\\\nurse\\\\nurse\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(saga);\n\nimport { persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport { put, takeLatest } from \"redux-saga/effects\";\nimport * as routerHelpers from \"../../router/RouterHelpers\";\nexport var actionTypes = {\n  AllBids: \"[AllBids] Action\",\n  AddBid: \"[AddBid] Action\",\n  UpdateBid: \"[UpdateBid] Action\",\n  DeleteBid: \"[DeleteBid] Action\",\n  SetCurBid: '[SetCurBid] Action'\n};\nvar initialBidState = {\n  bids: [],\n  curbid: {}\n}; // export const reducer = persistReducer(\n//   { storage, key: \"personal-user\", whitelist: [\"jobs\"] },\n//   (state = initialBidState, action) => {\n\nexport var bidReducer = function bidReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialBidState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.AllBids:\n      {\n        var allBids = action.payload.allBids;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          bids: allBids\n        });\n      }\n\n    case actionTypes.AddBid:\n      {\n        var _allBids = action.payload.allBids;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          bids: _allBids\n        });\n      }\n\n    case actionTypes.UpdateBid:\n      {\n        var _allBids2 = action.payload.allBids;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          bids: _allBids2\n        });\n      }\n\n    case actionTypes.DeleteBid:\n      {\n        var _allBids3 = action.payload.allBids;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          bids: _allBids3\n        });\n      }\n\n    case actionTypes.SetCurBid:\n      {\n        var curbid = action.payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          curbid: curbid\n        });\n      }\n\n    default:\n      return state;\n  }\n}; // );\n\nexport var actions = {\n  allBids: function allBids(_allBids4) {\n    return {\n      type: actionTypes.AllBids,\n      payload: {\n        allBids: _allBids4\n      }\n    };\n  },\n  addBid: function addBid(allBids) {\n    return {\n      type: actionTypes.AddBid,\n      payload: {\n        allBids: allBids\n      }\n    };\n  },\n  updateBid: function updateBid(allBids) {\n    return {\n      type: actionTypes.UpdateBid,\n      payload: {\n        allBids: allBids\n      }\n    };\n  },\n  deleteBid: function deleteBid(allBids) {\n    return {\n      type: actionTypes.DeleteBid,\n      payload: {\n        allBids: allBids\n      }\n    };\n  },\n  setCurBid: function setCurBid(curbid) {\n    return {\n      type: actionTypes.SetCurBid,\n      payload: curbid\n    };\n  }\n};\nexport function saga() {\n  return _regeneratorRuntime.wrap(function saga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"sources":["D:/Paste Work/nurse/nurse/client/src/app/store/ducks/bid.duck.js"],"names":["saga","persistReducer","storage","put","takeLatest","routerHelpers","actionTypes","AllBids","AddBid","UpdateBid","DeleteBid","SetCurBid","initialBidState","bids","curbid","bidReducer","state","action","type","allBids","payload","actions","addBid","updateBid","deleteBid","setCurBid"],"mappings":"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","sourcesContent":["import { persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { put, takeLatest } from \"redux-saga/effects\";\r\nimport * as routerHelpers from \"../../router/RouterHelpers\";\r\n\r\nexport const actionTypes = {\r\n  AllBids : \"[AllBids] Action\",\r\n  AddBid : \"[AddBid] Action\",\r\n  UpdateBid : \"[UpdateBid] Action\",\r\n  DeleteBid : \"[DeleteBid] Action\",\r\n  SetCurBid:'[SetCurBid] Action',\r\n};\r\n\r\nconst initialBidState = {\r\n  bids: [],\r\n  curbid:{}\r\n};\r\n\r\n// export const reducer = persistReducer(\r\n//   { storage, key: \"personal-user\", whitelist: [\"jobs\"] },\r\n//   (state = initialBidState, action) => {\r\nexport const bidReducer = (state = initialBidState, action) => {\r\n    switch (action.type) {\r\n      case actionTypes.AllBids: {\r\n        const { allBids } = action.payload;\r\n        return { ...state, bids: allBids };\r\n      }\r\n      case actionTypes.AddBid: {\r\n        const { allBids } = action.payload;\r\n        return { ...state, bids: allBids };\r\n      }\r\n      case actionTypes.UpdateBid: {\r\n        const { allBids } = action.payload;\r\n        return { ...state, bids: allBids };\r\n      }\r\n      case actionTypes.DeleteBid: {\r\n        const { allBids } = action.payload;\r\n        return { ...state, bids: allBids };\r\n      }\r\n      case actionTypes.SetCurBid: {\r\n        const curbid = action.payload;\r\n        return { ...state, curbid: curbid };\r\n      }\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n// );\r\n\r\nexport const actions = {\r\n  allBids: allBids => ({ type: actionTypes.AllBids, payload: { allBids } }),\r\n  addBid: allBids => ({ type: actionTypes.AddBid, payload: { allBids } }),\r\n  updateBid: allBids => ({ type: actionTypes.UpdateBid, payload: { allBids } }),\r\n  deleteBid: allBids => ({ type: actionTypes.DeleteBid, payload: { allBids } }),\r\n  setCurBid: curbid=>({type:actionTypes.SetCurBid, payload:curbid}),\r\n};\r\n\r\nexport function* saga() {\r\n  // yield takeLatest(actionTypes.AllJobs, function* allJobsSaga() {\r\n  //   yield put(actions.allJobs());\r\n  // });\r\n\r\n  // yield takeLatest(actionTypes.AddJob, function* addJobSaga() {\r\n  //   yield put(actions.addJob());\r\n  // });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}