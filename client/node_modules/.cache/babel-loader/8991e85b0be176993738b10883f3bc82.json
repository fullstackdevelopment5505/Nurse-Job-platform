{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\Paste Work\\\\nurse\\\\nurse\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"D:\\\\Paste Work\\\\nurse\\\\nurse\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(saga);\n\nimport { persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport { put, takeLatest } from \"redux-saga/effects\";\nimport { getUserByToken } from \"../../crud/auth.crud\";\nimport * as routerHelpers from \"../../router/RouterHelpers\";\nexport var actionTypes = {\n  Login: \"[Login] Action\",\n  UserLogin: \"[UserLogin] Action\",\n  Logout: \"[Logout] Action\",\n  Register: \"[Register] Action\",\n  UserRequested: \"[Request User] Action\",\n  UpdateRealUser: \"[UpdateRealUser] Action\",\n  PassUpdate: \"[PassUpdate] Action\",\n  UserLoaded: \"[Load User] Auth API\"\n};\nvar initialAuthState = {\n  user: undefined,\n  token: undefined,\n  role: undefined\n}; // export const reducer = persistReducer(\n//     { storage, key: \"demo1-auth\", whitelist: [\"user\", \"authToken\"] },\n//     (state = initialAuthState, action) => {\n//       switch (action.type) {\n//         case actionTypes.Login: {\n//           const { authToken } = action.payload;\n//           return { authToken, user: undefined };\n//         }\n//         case actionTypes.Register: {\n//           const { authToken } = action.payload;\n//           return { authToken, user: undefined };\n//         }\n//         case actionTypes.Logout: {\n//           routerHelpers.forgotLastLocation();\n//           return initialAuthState;\n//         }\n//         case actionTypes.UserLoaded: {\n//           const { user } = action.payload;\n//           return { ...state, user };\n//         }\n//         default:\n//           return state;\n//       }\n//     }\n// );\n\nexport var authReducer = function authReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialAuthState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.Login:\n      {\n        console.log('Login payoload');\n        console.log(action.payload);\n        var _action$payload = action.payload,\n            user = _action$payload.user,\n            token = _action$payload.token,\n            role = _action$payload.role;\n        return {\n          user: user,\n          token: token,\n          role: role\n        };\n      }\n\n    case actionTypes.UserLogin:\n      {\n        console.log('UserLogin payoload');\n        console.log(action.payload);\n        var _action$payload2 = action.payload,\n            _user = _action$payload2.user,\n            _token = _action$payload2.token,\n            _role = _action$payload2.role;\n        return {\n          user: _user,\n          token: _token,\n          role: _role\n        };\n      }\n\n    case actionTypes.Register:\n      {\n        var _action$payload3 = action.payload,\n            _user2 = _action$payload3.user,\n            _token2 = _action$payload3.token,\n            _role2 = _action$payload3.role;\n        return {\n          user: _user2,\n          token: _token2,\n          role: _role2\n        };\n      }\n\n    case actionTypes.UpdateRealUser:\n      {\n        var _user3 = action.payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          user: _user3\n        });\n      }\n\n    case actionTypes.Logout:\n      {\n        routerHelpers.forgotLastLocation();\n        localStorage.removeItem(\"isDashboardFirstRender\");\n        return initialAuthState;\n      }\n\n    case actionTypes.UserLoaded:\n      {\n        var _user4 = action.payload.user;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          user: _user4\n        });\n      }\n\n    case actionTypes.PassUpdate:\n      {\n        var _user5 = action.payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          user: _user5\n        });\n      }\n\n    default:\n      return state;\n  }\n};\nexport var actions = {\n  login: function login(userData) {\n    return {\n      type: actionTypes.Login,\n      payload: userData\n    };\n  },\n  userlogin: function userlogin(userData) {\n    return {\n      type: actionTypes.UserLogin,\n      payload: userData\n    };\n  },\n  updateRealUser: function updateRealUser(userData) {\n    return {\n      type: actionTypes.UpdateRealUser,\n      payload: userData\n    };\n  },\n  register: function register(user) {\n    return {\n      type: actionTypes.Register,\n      payload: {\n        user: user\n      }\n    };\n  },\n  passUpdate: function passUpdate(userData) {\n    return {\n      type: actionTypes.PassUpdate,\n      payload: userData\n    };\n  },\n  logout: function logout() {\n    return {\n      type: actionTypes.Logout\n    };\n  },\n  requestUser: function requestUser(user) {\n    return {\n      type: actionTypes.UserRequested,\n      payload: {\n        user: user\n      }\n    };\n  },\n  fulfillUser: function fulfillUser(user) {\n    return {\n      type: actionTypes.UserLoaded,\n      payload: {\n        user: user\n      }\n    };\n  }\n};\nexport function saga() {\n  return _regeneratorRuntime.wrap(function saga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"sources":["D:/Paste Work/nurse/nurse/client/src/app/store/ducks/auth.duck.js"],"names":["saga","persistReducer","storage","put","takeLatest","getUserByToken","routerHelpers","actionTypes","Login","UserLogin","Logout","Register","UserRequested","UpdateRealUser","PassUpdate","UserLoaded","initialAuthState","user","undefined","token","role","authReducer","state","action","type","console","log","payload","forgotLastLocation","localStorage","removeItem","actions","login","userData","userlogin","updateRealUser","register","passUpdate","logout","requestUser","fulfillUser"],"mappings":"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","sourcesContent":["import { persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { put, takeLatest } from \"redux-saga/effects\";\r\nimport { getUserByToken } from \"../../crud/auth.crud\";\r\nimport * as routerHelpers from \"../../router/RouterHelpers\";\r\n\r\nexport const actionTypes = {\r\n  Login: \"[Login] Action\",\r\n  UserLogin: \"[UserLogin] Action\",\r\n  Logout: \"[Logout] Action\",\r\n  Register: \"[Register] Action\",\r\n  UserRequested: \"[Request User] Action\",\r\n  UpdateRealUser:\"[UpdateRealUser] Action\",\r\n  PassUpdate:\"[PassUpdate] Action\",\r\n  UserLoaded: \"[Load User] Auth API\"  \r\n};\r\n\r\nconst initialAuthState = {\r\n  user: undefined,\r\n  token: undefined,\r\n  role: undefined\r\n};\r\n\r\n// export const reducer = persistReducer(\r\n//     { storage, key: \"demo1-auth\", whitelist: [\"user\", \"authToken\"] },\r\n//     (state = initialAuthState, action) => {\r\n//       switch (action.type) {\r\n//         case actionTypes.Login: {\r\n//           const { authToken } = action.payload;\r\n\r\n//           return { authToken, user: undefined };\r\n//         }\r\n\r\n//         case actionTypes.Register: {\r\n//           const { authToken } = action.payload;\r\n\r\n//           return { authToken, user: undefined };\r\n//         }\r\n\r\n//         case actionTypes.Logout: {\r\n//           routerHelpers.forgotLastLocation();\r\n//           return initialAuthState;\r\n//         }\r\n\r\n//         case actionTypes.UserLoaded: {\r\n//           const { user } = action.payload;\r\n\r\n//           return { ...state, user };\r\n//         }\r\n\r\n//         default:\r\n//           return state;\r\n//       }\r\n//     }\r\n// );\r\nexport const authReducer = (state = initialAuthState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.Login: {\r\n      console.log('Login payoload')\r\n      console.log(action.payload)\r\n        const { user, token, role } = action.payload;\r\n      return {user, token, role};\r\n    }\r\n    case actionTypes.UserLogin: {\r\n      console.log('UserLogin payoload')\r\n      console.log(action.payload)\r\n        const { user, token, role } = action.payload;\r\n      return {user, token, role};\r\n    }\r\n    case actionTypes.Register: {\r\n      const { user, token, role } = action.payload;\r\n      return {user, token, role};\r\n    }\r\n    case actionTypes.UpdateRealUser: {\r\n      const user = action.payload;\r\n      return {...state, user:user};\r\n    }\r\n    case actionTypes.Logout: {\r\n      routerHelpers.forgotLastLocation();\r\n      localStorage.removeItem(\"isDashboardFirstRender\");\r\n      return initialAuthState;\r\n    }\r\n    case actionTypes.UserLoaded: {\r\n      const { user } = action.payload;\r\n\r\n      return { ...state, user };\r\n    }\r\n    case actionTypes.PassUpdate:{\r\n      const user = action.payload;\r\n      return {...state, user:user};\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n\r\nexport const actions = {\r\n  login: userData => ({ type: actionTypes.Login, payload: userData }),\r\n  userlogin: userData => ({ type: actionTypes.UserLogin, payload: userData }),\r\n  updateRealUser:userData=>({type:actionTypes.UpdateRealUser, payload:userData}),\r\n  register: user => ({\r\n    type: actionTypes.Register,\r\n    payload: { user }\r\n  }),\r\n  passUpdate:userData=>({type:actionTypes.PassUpdate, payload:userData}),\r\n  logout: () => ({ type: actionTypes.Logout }),\r\n  requestUser: user => ({ type: actionTypes.UserRequested, payload: { user } }),\r\n  fulfillUser: user => ({ type: actionTypes.UserLoaded, payload: { user } })\r\n};\r\n\r\nexport function* saga() {\r\n  // yield takeLatest(actionTypes.Login, function* loginSaga() {\r\n  //   yield put(actions.requestUser());\r\n  // });\r\n\r\n  // yield takeLatest(actionTypes.Register, function* registerSaga() {\r\n  //   yield put(actions.requestUser());\r\n  // });\r\n\r\n  // yield takeLatest(actionTypes.UserRequested, function* userRequested() {\r\n  //   const { data: user } = yield getUserByToken();\r\n\r\n  //   yield put(actions.fulfillUser(user));\r\n  // });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}