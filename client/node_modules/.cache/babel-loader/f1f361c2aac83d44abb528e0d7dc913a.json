{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\Paste Work\\\\nurse\\\\nurse\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"D:\\\\Paste Work\\\\nurse\\\\nurse\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"D:\\\\Paste Work\\\\nurse\\\\nurse\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(saga);\n\nexport var actionTypes = {\n  APPEND_MESSAGE: \"APPEND_MESSAGE\",\n  IS_TYPING: \"IS_TYPING\",\n  JUST_JOINED: \"JUST_JOINED\",\n  NOT_TYPING: \"NOT_TYPING\",\n  ADD_ROOM: 'ADD_ROOM'\n};\nvar initialMessageState = {\n  messages: [],\n  rooms: [],\n  typist: null,\n  joined: false\n};\nexport var messageReducer = function messageReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialMessageState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.APPEND_MESSAGE:\n      var temp = [].concat(_toConsumableArray(state.messages), [action.payload]);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        messages: temp\n      });\n\n    case actionTypes.IS_TYPING:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        typist: action.payload.handle\n      });\n\n    case actionTypes.JUST_JOINED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        joined: action.payload.success\n      });\n\n    case actionTypes.NOT_TYPING:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        typist: null\n      });\n\n    case actionTypes:\n      ADD_ROOM: return _objectSpread(_objectSpread({}, state), {}, {\n        rooms: action.payload.rooms\n      });\n\n    default:\n      return state;\n  }\n};\nexport var actions = {\n  appendMessage: function appendMessage(data) {\n    return {\n      type: actionTypes.APPEND_MESSAGE,\n      payload: _objectSpread({}, data)\n    };\n  },\n  isTyping: function isTyping(data) {\n    return {\n      type: actionTypes.IS_TYPING,\n      payload: _objectSpread({}, data)\n    };\n  },\n  notTyping: function notTyping(data) {\n    return {\n      type: actionTypes.NOT_TYPING,\n      payload: _objectSpread({}, data)\n    };\n  },\n  justJoined: function justJoined(bool) {\n    return {\n      type: actionTypes.JUST_JOINED,\n      payload: {\n        success: bool\n      }\n    };\n  },\n  addRoom: function addRoom(data) {\n    return {\n      type: actionTypes.ADD_ROOM,\n      payload: _objectSpread({}, data)\n    };\n  } // logout: () => ({ type: actionTypes.Logout }),\n\n};\nexport function saga() {\n  return _regeneratorRuntime.wrap(function saga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"sources":["D:/Paste Work/nurse/nurse/client/src/app/store/ducks/message.duck.js"],"names":["saga","actionTypes","APPEND_MESSAGE","IS_TYPING","JUST_JOINED","NOT_TYPING","ADD_ROOM","initialMessageState","messages","rooms","typist","joined","messageReducer","state","action","type","temp","payload","handle","success","actions","appendMessage","data","isTyping","notTyping","justJoined","bool","addRoom"],"mappings":";;;;oDAyDmBA,I;;AAzDnB,OAAO,IAAMC,WAAW,GAAG;AACvBC,EAAAA,cAAc,EAAG,gBADM;AAEvBC,EAAAA,SAAS,EAAG,WAFW;AAGvBC,EAAAA,WAAW,EAAG,aAHS;AAIvBC,EAAAA,UAAU,EAAG,YAJU;AAKvBC,EAAAA,QAAQ,EAAC;AALc,CAApB;AAQL,IAAMC,mBAAmB,GAAG;AAC1BC,EAAAA,QAAQ,EAAC,EADiB;AAE1BC,EAAAA,KAAK,EAAC,EAFoB;AAG1BC,EAAAA,MAAM,EAAC,IAHmB;AAI1BC,EAAAA,MAAM,EAAC;AAJmB,CAA5B;AAOA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAyC;AAAA,MAAxCC,KAAwC,uEAAhCN,mBAAgC;AAAA,MAAXO,MAAW;;AACnE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKd,WAAW,CAACC,cAAjB;AACI,UAAMc,IAAI,gCAAOH,KAAK,CAACL,QAAb,IAAsBM,MAAM,CAACG,OAA7B,EAAV;AACA,6CACOJ,KADP;AAEIL,QAAAA,QAAQ,EAACQ;AAFb;;AAIJ,SAAKf,WAAW,CAACE,SAAjB;AACI,6CACOU,KADP;AAEIH,QAAAA,MAAM,EAACI,MAAM,CAACG,OAAP,CAAeC;AAF1B;;AAIJ,SAAKjB,WAAW,CAACG,WAAjB;AACI,6CACOS,KADP;AAEIF,QAAAA,MAAM,EAACG,MAAM,CAACG,OAAP,CAAeE;AAF1B;;AAIJ,SAAKlB,WAAW,CAACI,UAAjB;AACI,6CACOQ,KADP;AAEIH,QAAAA,MAAM,EAAC;AAFX;;AAIJ,SAAKT,WAAL;AAAiBK,MAAAA,QAAQ,EACrB,uCACOO,KADP;AAEIJ,QAAAA,KAAK,EAACK,MAAM,CAACG,OAAP,CAAeR;AAFzB;;AAIJ;AACI,aAAOI,KAAP;AA5BN;AA8BH,CA/BM;AAiCP,OAAO,IAAMO,OAAO,GAAG;AACrBC,EAAAA,aAAa,EAAE,uBAACC,IAAD;AAAA,WAAW;AAAEP,MAAAA,IAAI,EAAEd,WAAW,CAACC,cAApB;AAAoCe,MAAAA,OAAO,oBAAMK,IAAN;AAA3C,KAAX;AAAA,GADM;AAErBC,EAAAA,QAAQ,EAAE,kBAACD,IAAD;AAAA,WAAW;AAAEP,MAAAA,IAAI,EAAEd,WAAW,CAACE,SAApB;AAA+Bc,MAAAA,OAAO,oBAAMK,IAAN;AAAtC,KAAX;AAAA,GAFW;AAGrBE,EAAAA,SAAS,EAAE,mBAACF,IAAD;AAAA,WAAW;AAAEP,MAAAA,IAAI,EAAEd,WAAW,CAACI,UAApB;AAAgCY,MAAAA,OAAO,oBAAMK,IAAN;AAAvC,KAAX;AAAA,GAHU;AAIrBG,EAAAA,UAAU,EAAE,oBAACC,IAAD;AAAA,WAAW;AAAEX,MAAAA,IAAI,EAAEd,WAAW,CAACG,WAApB;AAAiCa,MAAAA,OAAO,EAAE;AAAEE,QAAAA,OAAO,EAACO;AAAV;AAA1C,KAAX;AAAA,GAJS;AAKrBC,EAAAA,OAAO,EAAC,iBAACL,IAAD;AAAA,WAAU;AAAEP,MAAAA,IAAI,EAAEd,WAAW,CAACK,QAApB;AAA8BW,MAAAA,OAAO,oBAAMK,IAAN;AAArC,KAAV;AAAA,GALa,CAMrB;;AANqB,CAAhB;AASP,OAAO,SAAUtB,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["export const actionTypes = {\n    APPEND_MESSAGE : \"APPEND_MESSAGE\",\n    IS_TYPING : \"IS_TYPING\",\n    JUST_JOINED : \"JUST_JOINED\",\n    NOT_TYPING : \"NOT_TYPING\",\n    ADD_ROOM:'ADD_ROOM'\n  };\n  \n  const initialMessageState = {\n    messages:[],\n    rooms:[],\n    typist:null,\n    joined:false,\n  };\n  \n  export const messageReducer = (state = initialMessageState, action) => {\n      switch (action.type) {\n        case actionTypes.APPEND_MESSAGE:\n            const temp = [...state.messages,action.payload];\n            return {\n                ...state,\n                messages:temp,\n            };\n        case actionTypes.IS_TYPING:\n            return {\n                ...state,\n                typist:action.payload.handle,\n            };\n        case actionTypes.JUST_JOINED:\n            return {\n                ...state,\n                joined:action.payload.success,\n            };\n        case actionTypes.NOT_TYPING:\n            return {\n                ...state,\n                typist:null,\n            };\n        case actionTypes:ADD_ROOM:\n            return{\n                ...state,\n                rooms:action.payload.rooms\n            }\n        default:\n            return state;\n      }\n  }\n  \n  export const actions = {\n    appendMessage: (data) => ({ type: actionTypes.APPEND_MESSAGE, payload: {...data} }),\n    isTyping: (data) => ({ type: actionTypes.IS_TYPING, payload: {...data} }),\n    notTyping: (data) => ({ type: actionTypes.NOT_TYPING, payload: {...data} }),\n    justJoined: (bool) => ({ type: actionTypes.JUST_JOINED, payload: { success:bool} }),\n    addRoom:(data)=> ({ type: actionTypes.ADD_ROOM, payload: {...data} })\n    // logout: () => ({ type: actionTypes.Logout }),\n  };\n  \n  export function* saga() {\n    // yield takeLatest(actionTypes.AllLedgers, function* allLedgersSaga() {\n    //   yield put(actions.allLedgers());\n    // });\n  \n    // yield takeLatest(actionTypes.AddLedger, function* addLedgerSaga() {\n    //   yield put(actions.addLedger());\n    // });\n  }\n  "]},"metadata":{},"sourceType":"module"}