{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\Paste Work\\\\nurse\\\\nurse\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"D:\\\\Paste Work\\\\nurse\\\\nurse\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(saga);\n\nexport var actionTypes = {\n  AllLedgers: \"[AllLedgers] Action\",\n  UpdateLedger: \"[UpdateLedger] Action\",\n  Logout: \"[Logout] Action\"\n};\nvar initialLedgerState = {\n  ledgers: []\n};\nexport var ledgerReducer = function ledgerReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialLedgerState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.AllLedgers:\n      {\n        var allLedgers = action.payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          ledgers: allLedgers\n        });\n      }\n\n    case actionTypes.UpdateLedger:\n      {\n        var _allLedgers = action.payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          ledgers: _allLedgers\n        });\n      }\n\n    case actionTypes.Logout:\n      {\n        return initialLedgerState;\n      }\n\n    default:\n      return state;\n  }\n};\nexport var actions = {\n  allLedgers: function allLedgers(_allLedgers2) {\n    return {\n      type: actionTypes.AllLedgers,\n      payload: _allLedgers2\n    };\n  },\n  updateLedger: function updateLedger(allLedgers) {\n    return {\n      type: actionTypes.UpdateLedger,\n      payload: allLedgers\n    };\n  },\n  logout: function logout() {\n    return {\n      type: actionTypes.Logout\n    };\n  }\n};\nexport function saga() {\n  return _regeneratorRuntime.wrap(function saga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"sources":["D:/Paste Work/nurse/nurse/client/src/app/store/ducks/ledger.duck.js"],"names":["saga","actionTypes","AllLedgers","UpdateLedger","Logout","initialLedgerState","ledgers","ledgerReducer","state","action","type","allLedgers","payload","actions","updateLedger","logout"],"mappings":";;;oDAqCiBA,I;;AArCjB,OAAO,IAAMC,WAAW,GAAG;AACzBC,EAAAA,UAAU,EAAG,qBADY;AAEzBC,EAAAA,YAAY,EAAG,uBAFU;AAGzBC,EAAAA,MAAM,EAAG;AAHgB,CAApB;AAMP,IAAMC,kBAAkB,GAAG;AACzBC,EAAAA,OAAO,EAAE;AADgB,CAA3B;AAIA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAwC;AAAA,MAAvCC,KAAuC,uEAA/BH,kBAA+B;AAAA,MAAXI,MAAW;;AACjE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,WAAW,CAACC,UAAjB;AAA6B;AAC3B,YAAMS,UAAU,GAAGF,MAAM,CAACG,OAA1B;AACA,+CAAYJ,KAAZ;AAAmBF,UAAAA,OAAO,EAAEK;AAA5B;AACD;;AAED,SAAKV,WAAW,CAACE,YAAjB;AAA+B;AAC7B,YAAMQ,WAAU,GAAGF,MAAM,CAACG,OAA1B;AACA,+CAAYJ,KAAZ;AAAmBF,UAAAA,OAAO,EAAEK;AAA5B;AACD;;AAED,SAAKV,WAAW,CAACG,MAAjB;AAAyB;AACvB,eAAOC,kBAAP;AACD;;AAED;AACE,aAAOG,KAAP;AAhBJ;AAkBH,CAnBM;AAqBP,OAAO,IAAMK,OAAO,GAAG;AACrBF,EAAAA,UAAU,EAAE,oBAAAA,YAAU;AAAA,WAAK;AAAED,MAAAA,IAAI,EAAET,WAAW,CAACC,UAApB;AAAgCU,MAAAA,OAAO,EAAED;AAAzC,KAAL;AAAA,GADD;AAErBG,EAAAA,YAAY,EAAE,sBAAAH,UAAU;AAAA,WAAK;AAAED,MAAAA,IAAI,EAAET,WAAW,CAACE,YAApB;AAAkCS,MAAAA,OAAO,EAAED;AAA3C,KAAL;AAAA,GAFH;AAGrBI,EAAAA,MAAM,EAAE;AAAA,WAAO;AAAEL,MAAAA,IAAI,EAAET,WAAW,CAACG;AAApB,KAAP;AAAA;AAHa,CAAhB;AAMP,OAAO,SAAUJ,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["export const actionTypes = {\r\n  AllLedgers : \"[AllLedgers] Action\",\r\n  UpdateLedger : \"[UpdateLedger] Action\",\r\n  Logout : \"[Logout] Action\",\r\n};\r\n\r\nconst initialLedgerState = {\r\n  ledgers: [],\r\n};\r\n\r\nexport const ledgerReducer = (state = initialLedgerState, action) => {\r\n    switch (action.type) {\r\n      case actionTypes.AllLedgers: {\r\n        const allLedgers = action.payload;\r\n        return { ...state, ledgers: allLedgers };\r\n      }\r\n\r\n      case actionTypes.UpdateLedger: {\r\n        const allLedgers = action.payload;\r\n        return { ...state, ledgers: allLedgers };\r\n      }\r\n\r\n      case actionTypes.Logout: {\r\n        return initialLedgerState;\r\n      }\r\n\r\n      default:\r\n        return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n  allLedgers: allLedgers => ({ type: actionTypes.AllLedgers, payload: allLedgers }),\r\n  updateLedger: allLedgers => ({ type: actionTypes.UpdateLedger, payload: allLedgers }),\r\n  logout: () => ({ type: actionTypes.Logout }),\r\n};\r\n\r\nexport function* saga() {\r\n  // yield takeLatest(actionTypes.AllLedgers, function* allLedgersSaga() {\r\n  //   yield put(actions.allLedgers());\r\n  // });\r\n\r\n  // yield takeLatest(actionTypes.AddLedger, function* addLedgerSaga() {\r\n  //   yield put(actions.addLedger());\r\n  // });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}