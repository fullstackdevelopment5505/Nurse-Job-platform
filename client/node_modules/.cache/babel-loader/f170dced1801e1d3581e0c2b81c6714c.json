{"ast":null,"code":"export function removeCSSClass(ele, cls) {\n  var reg = new RegExp(\"(\\\\s|^)\" + cls + \"(\\\\s|$)\");\n  ele.className = ele.className.replace(reg, \" \");\n}\nexport function addCSSClass(ele, cls) {\n  ele.classList.add(cls);\n}\nexport var toAbsoluteUrl = function toAbsoluteUrl(pathname) {\n  return process.env.PUBLIC_URL + pathname;\n};\nexport function setupAxios(axios, store) {\n  axios.interceptors.request.use(function (config) {\n    var _store$getState = store.getState(),\n        authToken = _store$getState.auth.authToken;\n\n    if (authToken) {\n      config.headers.Authorization = \"Bearer \".concat(authToken);\n    }\n\n    return config;\n  }, function (err) {\n    return Promise.reject(err);\n  });\n}\n/*  removeStorage: removes a key from localStorage and its sibling expiracy key\r\n    params:\r\n        key <string>     : localStorage key to remove\r\n    returns:\r\n        <boolean> : telling if operation succeeded\r\n */\n\nexport function removeStorage(key) {\n  try {\n    localStorage.setItem(key, \"\");\n    localStorage.setItem(key + \"_expiresIn\", \"\");\n  } catch (e) {\n    console.log(\"removeStorage: Error removing key [\" + key + \"] from localStorage: \" + JSON.stringify(e));\n    return false;\n  }\n\n  return true;\n}\n/*  getStorage: retrieves a key from localStorage previously set with setStorage().\r\n    params:\r\n        key <string> : localStorage key\r\n    returns:\r\n        <string> : value of localStorage key\r\n        null : in case of expired key or failure\r\n */\n\nexport function getStorage(key) {\n  var now = Date.now(); //epoch time, lets deal only with integer\n  // set expiration for storage\n\n  var expiresIn = localStorage.getItem(key + \"_expiresIn\");\n\n  if (expiresIn === undefined || expiresIn === null) {\n    expiresIn = 0;\n  }\n\n  expiresIn = Math.abs(expiresIn);\n\n  if (expiresIn < now) {\n    // Expired\n    removeStorage(key);\n    return null;\n  } else {\n    try {\n      var value = localStorage.getItem(key);\n      return value;\n    } catch (e) {\n      console.log(\"getStorage: Error reading key [\" + key + \"] from localStorage: \" + JSON.stringify(e));\n      return null;\n    }\n  }\n}\n/*  setStorage: writes a key into localStorage setting a expire time\r\n    params:\r\n        key <string>     : localStorage key\r\n        value <string>   : localStorage value\r\n        expires <number> : number of seconds from now to expire the key\r\n    returns:\r\n        <boolean> : telling if operation succeeded\r\n */\n\nexport function setStorage(key, value, expires) {\n  if (expires === undefined || expires === null) {\n    expires = 24 * 60 * 60; // default: seconds for 1 day\n  }\n\n  var now = Date.now(); //millisecs since epoch time, lets deal only with integer\n\n  var schedule = now + expires * 1000;\n\n  try {\n    localStorage.setItem(key, value);\n    localStorage.setItem(key + \"_expiresIn\", schedule);\n  } catch (e) {\n    console.log(\"setStorage: Error setting key [\" + key + \"] in localStorage: \" + JSON.stringify(e));\n    return false;\n  }\n\n  return true;\n}","map":{"version":3,"sources":["D:/Paste Work/nurse/nurse/client/src/_metronic/utils/utils.js"],"names":["removeCSSClass","ele","cls","reg","RegExp","className","replace","addCSSClass","classList","add","toAbsoluteUrl","pathname","process","env","PUBLIC_URL","setupAxios","axios","store","interceptors","request","use","config","getState","authToken","auth","headers","Authorization","err","Promise","reject","removeStorage","key","localStorage","setItem","e","console","log","JSON","stringify","getStorage","now","Date","expiresIn","getItem","undefined","Math","abs","value","setStorage","expires","schedule"],"mappings":"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","sourcesContent":["export function removeCSSClass(ele, cls) {\r\n  const reg = new RegExp(\"(\\\\s|^)\" + cls + \"(\\\\s|$)\");\r\n  ele.className = ele.className.replace(reg, \" \");\r\n}\r\n\r\nexport function addCSSClass(ele, cls) {\r\n  ele.classList.add(cls);\r\n}\r\n\r\nexport const toAbsoluteUrl = pathname => process.env.PUBLIC_URL + pathname;\r\n\r\nexport function setupAxios(axios, store) {\r\n  axios.interceptors.request.use(\r\n    config => {\r\n      const {\r\n        auth: { authToken }\r\n      } = store.getState();\r\n\r\n      if (authToken) {\r\n        config.headers.Authorization = `Bearer ${authToken}`;\r\n      }\r\n\r\n      return config;\r\n    },\r\n    err => Promise.reject(err)\r\n  );\r\n}\r\n\r\n/*  removeStorage: removes a key from localStorage and its sibling expiracy key\r\n    params:\r\n        key <string>     : localStorage key to remove\r\n    returns:\r\n        <boolean> : telling if operation succeeded\r\n */\r\nexport function removeStorage(key) {\r\n  try {\r\n    localStorage.setItem(key, \"\");\r\n    localStorage.setItem(key + \"_expiresIn\", \"\");\r\n  } catch (e) {\r\n    console.log(\r\n      \"removeStorage: Error removing key [\" +\r\n        key +\r\n        \"] from localStorage: \" +\r\n        JSON.stringify(e)\r\n    );\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\n/*  getStorage: retrieves a key from localStorage previously set with setStorage().\r\n    params:\r\n        key <string> : localStorage key\r\n    returns:\r\n        <string> : value of localStorage key\r\n        null : in case of expired key or failure\r\n */\r\nexport function getStorage(key) {\r\n  const now = Date.now(); //epoch time, lets deal only with integer\r\n  // set expiration for storage\r\n  let expiresIn = localStorage.getItem(key + \"_expiresIn\");\r\n  if (expiresIn === undefined || expiresIn === null) {\r\n    expiresIn = 0;\r\n  }\r\n\r\n  expiresIn = Math.abs(expiresIn);\r\n  if (expiresIn < now) {\r\n    // Expired\r\n    removeStorage(key);\r\n    return null;\r\n  } else {\r\n    try {\r\n      const value = localStorage.getItem(key);\r\n      return value;\r\n    } catch (e) {\r\n      console.log(\r\n        \"getStorage: Error reading key [\" +\r\n          key +\r\n          \"] from localStorage: \" +\r\n          JSON.stringify(e)\r\n      );\r\n      return null;\r\n    }\r\n  }\r\n}\r\n/*  setStorage: writes a key into localStorage setting a expire time\r\n    params:\r\n        key <string>     : localStorage key\r\n        value <string>   : localStorage value\r\n        expires <number> : number of seconds from now to expire the key\r\n    returns:\r\n        <boolean> : telling if operation succeeded\r\n */\r\nexport function setStorage(key, value, expires) {\r\n  if (expires === undefined || expires === null) {\r\n    expires = 24 * 60 * 60; // default: seconds for 1 day\r\n  }\r\n\r\n  const now = Date.now(); //millisecs since epoch time, lets deal only with integer\r\n  const schedule = now + expires * 1000;\r\n  try {\r\n    localStorage.setItem(key, value);\r\n    localStorage.setItem(key + \"_expiresIn\", schedule);\r\n  } catch (e) {\r\n    console.log(\r\n      \"setStorage: Error setting key [\" +\r\n        key +\r\n        \"] in localStorage: \" +\r\n        JSON.stringify(e)\r\n    );\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}