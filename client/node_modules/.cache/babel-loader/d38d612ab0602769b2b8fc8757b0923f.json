{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\Paste Work\\\\nurse\\\\nurse\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"D:\\\\Paste Work\\\\nurse\\\\nurse\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(saga);\n\nimport { persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport { put, takeLatest } from \"redux-saga/effects\";\nimport * as routerHelpers from \"../../router/RouterHelpers\";\nexport var actionTypes = {\n  Add: \"[Add] Action\",\n  Update: \"[Update] Action\",\n  Delete: \"[Delete] Action\",\n  GetAll: \"[GetAll] Action\" // Logout: \"[Logout] Action\",\n  // Register: \"[Register] Action\",\n  // UserRequested: \"[Request User] Action\",\n  // UserLoaded: \"[Load User] Auth API\"\n\n};\nvar initialCategoryState = {\n  allcategories: []\n};\nexport var categoryReducer = function categoryReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialCategoryState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.Add:\n      {\n        console.log('allcategories Add payoload');\n        console.log(action.payload);\n        var allcategories = action.payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          allcategories: allcategories\n        });\n      }\n\n    case actionTypes.Update:\n      {\n        console.log('allcategories Update payoload');\n        console.log(action.payload);\n        var _allcategories = action.payload;\n        return {\n          allcategories: _allcategories\n        };\n      }\n\n    case actionTypes.Delete:\n      {\n        console.log('allcategories Delete payoload');\n        console.log(action.payload);\n        var _allcategories2 = action.payload;\n        return {\n          allcategories: _allcategories2\n        };\n      }\n\n    case actionTypes.GetAll:\n      {\n        console.log('allcategories GetAll payoload');\n        console.log(action.payload);\n        var _allcategories3 = action.payload;\n        return {\n          allcategories: _allcategories3\n        };\n      }\n    // case actionTypes.Register: {\n    //   const { user, token, role } = action.payload;\n    //   return {user, token, role};\n    // }\n    // case actionTypes.UpdateRealUser: {\n    //   const { user } = action.payload;\n    //   return {...state, user};\n    // }\n    // case actionTypes.Logout: {\n    //   routerHelpers.forgotLastLocation();\n    //   localStorage.removeItem(\"isDashboardFirstRender\");\n    //   return initialAuthState;\n    // }\n    // case actionTypes.UserLoaded: {\n    //   const { user } = action.payload;\n    //   return { ...state, user };\n    // }\n\n    default:\n      return state;\n  }\n};\nexport var actions = {\n  addCategory: function addCategory(allcategories) {\n    return {\n      type: actionTypes.Add,\n      payload: allcategories\n    };\n  },\n  updateCategory: function updateCategory(allcategories) {\n    return {\n      type: actionTypes.Update,\n      payload: allcategories\n    };\n  },\n  deleteCategory: function deleteCategory(allcategories) {\n    return {\n      type: actionTypes.Delete,\n      payload: allcategories\n    };\n  },\n  allCategories: function allCategories(allcategories) {\n    return {\n      type: actionTypes.GetAll,\n      payload: allcategories\n    };\n  } // register: user => ({\n  //   type: actionTypes.Register,\n  //   payload: { user }\n  // }),\n  // logout: () => ({ type: actionTypes.Logout }),\n  // requestUser: user => ({ type: actionTypes.UserRequested, payload: { user } }),\n  // fulfillUser: user => ({ type: actionTypes.UserLoaded, payload: { user } })\n\n};\nexport function saga() {\n  return _regeneratorRuntime.wrap(function saga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"sources":["D:/Paste Work/nurse/nurse/client/src/app/store/ducks/category.duck.js"],"names":["saga","persistReducer","storage","put","takeLatest","routerHelpers","actionTypes","Add","Update","Delete","GetAll","initialCategoryState","allcategories","categoryReducer","state","action","type","console","log","payload","actions","addCategory","updateCategory","deleteCategory","allCategories"],"mappings":"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","sourcesContent":["import { persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { put, takeLatest } from \"redux-saga/effects\";\r\nimport * as routerHelpers from \"../../router/RouterHelpers\";\r\n\r\nexport const actionTypes = {\r\n  Add: \"[Add] Action\",\r\n  Update: \"[Update] Action\",\r\n  Delete: \"[Delete] Action\",\r\n  GetAll: \"[GetAll] Action\",\r\n  // Logout: \"[Logout] Action\",\r\n  // Register: \"[Register] Action\",\r\n  // UserRequested: \"[Request User] Action\",\r\n  // UserLoaded: \"[Load User] Auth API\"\r\n};\r\n\r\nconst initialCategoryState = {\r\n  allcategories:[]\r\n};\r\n\r\nexport const categoryReducer = (state = initialCategoryState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.Add: {\r\n      console.log('allcategories Add payoload')\r\n      console.log(action.payload)\r\n      const  allcategories  = action.payload;\r\n      return {...state, allcategories: allcategories};\r\n    }\r\n    case actionTypes.Update: {\r\n      console.log('allcategories Update payoload')\r\n      console.log(action.payload)\r\n      const  allcategories  = action.payload;\r\n      return {allcategories: allcategories};\r\n    }\r\n    case actionTypes.Delete: {\r\n      console.log('allcategories Delete payoload')\r\n      console.log(action.payload)\r\n      const  allcategories  = action.payload;\r\n      return {allcategories: allcategories};\r\n    }\r\n    case actionTypes.GetAll: {\r\n      console.log('allcategories GetAll payoload')\r\n      console.log(action.payload)\r\n      const  allcategories  = action.payload;\r\n      return {allcategories: allcategories};\r\n    }\r\n    // case actionTypes.Register: {\r\n    //   const { user, token, role } = action.payload;\r\n    //   return {user, token, role};\r\n    // }\r\n    // case actionTypes.UpdateRealUser: {\r\n    //   const { user } = action.payload;\r\n    //   return {...state, user};\r\n    // }\r\n    // case actionTypes.Logout: {\r\n    //   routerHelpers.forgotLastLocation();\r\n    //   localStorage.removeItem(\"isDashboardFirstRender\");\r\n    //   return initialAuthState;\r\n    // }\r\n    // case actionTypes.UserLoaded: {\r\n    //   const { user } = action.payload;\r\n\r\n    //   return { ...state, user };\r\n    // }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n\r\nexport const actions = {\r\n  addCategory: allcategories => ({ type: actionTypes.Add, payload: allcategories }),\r\n  updateCategory: allcategories => ({ type: actionTypes.Update, payload: allcategories }),\r\n  deleteCategory: allcategories => ({ type: actionTypes.Delete, payload: allcategories }),\r\n  allCategories: allcategories => ({ type: actionTypes.GetAll, payload: allcategories }),\r\n  // register: user => ({\r\n  //   type: actionTypes.Register,\r\n  //   payload: { user }\r\n  // }),\r\n  // logout: () => ({ type: actionTypes.Logout }),\r\n  // requestUser: user => ({ type: actionTypes.UserRequested, payload: { user } }),\r\n  // fulfillUser: user => ({ type: actionTypes.UserLoaded, payload: { user } })\r\n};\r\n\r\nexport function* saga() {\r\n  // yield takeLatest(actionTypes.Login, function* loginSaga() {\r\n  //   yield put(actions.requestUser());\r\n  // });\r\n\r\n  // yield takeLatest(actionTypes.Register, function* registerSaga() {\r\n  //   yield put(actions.requestUser());\r\n  // });\r\n\r\n  // yield takeLatest(actionTypes.UserRequested, function* userRequested() {\r\n  //   const { data: user } = yield getUserByToken();\r\n\r\n  //   yield put(actions.fulfillUser(user));\r\n  // });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}