{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\Paste Work\\\\nurse\\\\nurse\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"D:\\\\Paste Work\\\\nurse\\\\nurse\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(saga);\n\nimport * as routerHelpers from \"../../router/RouterHelpers\";\nexport var actionTypes = {\n  AllCurrentStates: \"[AllCurrentStates] Action\",\n  Logout: \"[Logout] Action\",\n  SetSortStatus: \"[SetSortStatus] Action\",\n  SetSelectedTabKey: \"[SetSelectedTabKey] Action\",\n  SetManagementTabIndex: \"[SetManagementTabIndex] Action\"\n};\nvar initialCurrentStateState = {\n  pageIndex: 0,\n  isLinkShow: true,\n  sortStatus: {\n    columnIndex: 0,\n    status: true\n  },\n  //columnIndex -> 0:Created Date, 1:Company Name, 2:Full Name, ..., 8: Company Status  // status -> true: asc, false: desc\n  selectedTabKey: 4,\n  managementTabIndex: 0 // 0: default, 1: all companies, 2: new users, 3: Account, 6: Expensive\n\n};\nexport var currentStateReducer = function currentStateReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialCurrentStateState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.AllCurrentStates:\n      {\n        var _action$payload = action.payload,\n            pageIndex = _action$payload.pageIndex,\n            isLinkShow = _action$payload.isLinkShow,\n            managementTabIndex = _action$payload.managementTabIndex;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          pageIndex: pageIndex,\n          isLinkShow: isLinkShow,\n          managementTabIndex: managementTabIndex\n        });\n      }\n\n    case actionTypes.SetSortStatus:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          sortStatus: action.payload\n        });\n      }\n\n    case actionTypes.SetSelectedTabKey:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          selectedTabKey: action.payload\n        });\n      }\n\n    case actionTypes.SetManagementTabIndex:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          managementTabIndex: action.payload\n        });\n      }\n\n    case actionTypes.Logout:\n      {\n        routerHelpers.forgotLastLocation();\n        return initialCurrentStateState;\n      }\n\n    default:\n      return state;\n  }\n}; // );\n\nexport var actions = {\n  allCurrentStates: function allCurrentStates(_allCurrentStates) {\n    return {\n      type: actionTypes.AllCurrentStates,\n      payload: _allCurrentStates\n    };\n  },\n  setSortStatus: function setSortStatus(currentSortStatus) {\n    return {\n      type: actionTypes.SetSortStatus,\n      payload: currentSortStatus\n    };\n  },\n  setSelectedTabKey: function setSelectedTabKey(key) {\n    return {\n      type: actionTypes.SetSelectedTabKey,\n      payload: key\n    };\n  },\n  setManagementTabIndex: function setManagementTabIndex(tabIndex) {\n    return {\n      type: actionTypes.SetManagementTabIndex,\n      payload: tabIndex\n    };\n  },\n  logout: function logout() {\n    return {\n      type: actionTypes.Logout\n    };\n  }\n};\nexport function saga() {\n  return _regeneratorRuntime.wrap(function saga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"sources":["D:/Paste Work/nurse/nurse/client/src/app/store/ducks/currentState.duck.js"],"names":["saga","routerHelpers","actionTypes","AllCurrentStates","Logout","SetSortStatus","SetSelectedTabKey","SetManagementTabIndex","initialCurrentStateState","pageIndex","isLinkShow","sortStatus","columnIndex","status","selectedTabKey","managementTabIndex","currentStateReducer","state","action","type","payload","forgotLastLocation","actions","allCurrentStates","setSortStatus","currentSortStatus","setSelectedTabKey","key","setManagementTabIndex","tabIndex","logout"],"mappings":"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","sourcesContent":["import * as routerHelpers from \"../../router/RouterHelpers\";\r\n\r\nexport const actionTypes = {\r\n  AllCurrentStates : \"[AllCurrentStates] Action\",\r\n  Logout : \"[Logout] Action\",\r\n  SetSortStatus: \"[SetSortStatus] Action\",\r\n  SetSelectedTabKey: \"[SetSelectedTabKey] Action\",\r\n  SetManagementTabIndex: \"[SetManagementTabIndex] Action\",\r\n};\r\n\r\nconst initialCurrentStateState = {\r\n  pageIndex: 0,\r\n  isLinkShow: true,\r\n  sortStatus: {columnIndex: 0, status: true},     //columnIndex -> 0:Created Date, 1:Company Name, 2:Full Name, ..., 8: Company Status  // status -> true: asc, false: desc\r\n  selectedTabKey: 4,                              \r\n  managementTabIndex: 0,    // 0: default, 1: all companies, 2: new users, 3: Account, 6: Expensive\r\n};\r\n\r\nexport const currentStateReducer = (state = initialCurrentStateState, action) => {\r\n    switch (action.type) {\r\n      case actionTypes.AllCurrentStates: {\r\n        const { pageIndex, isLinkShow, managementTabIndex } = action.payload;\r\n        return { ...state, pageIndex, isLinkShow, managementTabIndex };\r\n      }\r\n\r\n      case actionTypes.SetSortStatus: {\r\n        return {...state, sortStatus: action.payload};\r\n      }\r\n\r\n      case actionTypes.SetSelectedTabKey: {\r\n        return {...state, selectedTabKey: action.payload};\r\n      }\r\n\r\n      case actionTypes.SetManagementTabIndex: {\r\n        return {...state, managementTabIndex: action.payload}\r\n      }\r\n      \r\n      case actionTypes.Logout: {\r\n        routerHelpers.forgotLastLocation();\r\n        return initialCurrentStateState;\r\n      }\r\n\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n// );\r\n\r\nexport const actions = {\r\n  allCurrentStates: allCurrentStates => ({ type: actionTypes.AllCurrentStates, payload: allCurrentStates }),\r\n  setSortStatus: currentSortStatus => ({type: actionTypes.SetSortStatus, payload: currentSortStatus}),\r\n  setSelectedTabKey: key => ({type: actionTypes.SetSelectedTabKey, payload: key}),\r\n  setManagementTabIndex: tabIndex => ({type: actionTypes.SetManagementTabIndex, payload: tabIndex}),\r\n  logout: () => ({ type: actionTypes.Logout }),\r\n};\r\n\r\nexport function* saga() {\r\n  // yield takeLatest(actionTypes.AllCurrentStates, function* allCurrentStatesSaga() {\r\n  //   yield put(actions.allCurrentStates());\r\n  // });\r\n\r\n  // yield takeLatest(actionTypes.AddCurrentState, function* addCurrentStateSaga() {\r\n  //   yield put(actions.addCurrentState());\r\n  // });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}